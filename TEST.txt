1. Frameworks Used:
Write about React JS
React: React is a JavaScript library for building user interfaces. It is maintained by Facebook and a community of individual developers and companies. React can be used as a base in the development of single-page or mobile applications. However, React is only concerned with rendering data to the DOM, and so creating React applications usually requires the use of additional libraries for state management and routing. Redux and React Router are respective examples of such libraries.

Write about Next JS in 400 words
Next.js: Next.js is an open-source web development framework created by Vercel enabling React-based web applications with server-side rendering and generating static websites. React documentation mentions Next.js among "Recommended Toolchains" advising it to developers as a solution when "Building a server-rendered website with Node.js". Where traditional React apps can only render their content in the client-side browser, Next.js extends this functionality to include applications rendered on the server-side. This allows Next.js apps to be rendered on the server and then sent to the client as fully rendered HTML, which can then be cached by a CDN for performance and SEO benefits. Next.js also allows for the creation of hybrid apps, where static content is pre-rendered into HTML files at build time and then dynamically re-rendered on the client-side as needed.

Write about mantine UI library in 400 words
Mantine: Build fully functional accessible web applications faster than ever â€“ Mantine includes more than 100 customizable components and 40 hooks to cover you in any situation. Each Mantine component supports styles overriding for every internal element inside with classes or inline styles. This feature alongside other customization options allows you to implement any visual modifications to components and adapt them to fit almost any design requirements. Extend default theme with any amount of additional colors, replace shadows, radius, spacing, fonts and many other properties to match your design requirements.

Write about React Query in 400 words
Powerful asynchronous state management for TS/JS, React, Solid, Vue and Svelte. Toss out that granular state management, manual refetching and endless bowls of async-spaghetti code. TanStack Query gives you declarative, always-up-to-date auto-managed queries and mutations that directly improve both your developer and user experiences. Writing your data fetching logic by hand is over. Tell TanStack Query where to get your data and how fresh you need it to be and the rest is automatic. It handles caching, background updates and stale data out of the box with zero-configuration. If you know how to work with promises or async/await, then you already know how to use TanStack Query. There's no global state to manage, reducers, normalization systems or heavy configurations to understand. Simply pass a function that resolves your data (or throws an error) and the rest is history.

Typescript: JavaScript and More - TypeScript adds additional syntax to JavaScript to support a tighter integration with your editor. Catch errors early in your editor. A Result You Can Trust - TypeScript code converts to JavaScript, which runs anywhere JavaScript runs: In a browser, on Node.js or Deno and in your apps. Safety at Scale - TypeScript understands JavaScript and uses type inference to give you great tooling without additional code. It is a strongly typed programming language that builds on JavaScript, giving you better tooling at any scale. TypeScript is a typed superset of JavaScript that compiles to plain JavaScript. Any browser. Any host. Any OS. Open source.