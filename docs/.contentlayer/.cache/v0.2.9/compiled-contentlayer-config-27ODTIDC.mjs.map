{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts", "../../../utils/get-table-of-contents.ts"],
  "sourcesContent": ["import { Document } from 'contentlayer/core';\r\nimport {\r\n    ComputedFields,\r\n    FieldDefs,\r\n    defineDocumentType,\r\n    makeSource,\r\n} from 'contentlayer/source-files';\r\nimport rehypeSlug from 'rehype-slug';\r\nimport { getTableOfContents } from './utils/get-table-of-contents';\r\n\r\nconst computedFields: ComputedFields = {\r\n    slug: {\r\n        type: 'string',\r\n        resolve: (doc) => `/${doc._raw.flattenedPath}`,\r\n    },\r\n};\r\n\r\nconst computeFrontmatter = (fields: FieldDefs, doc: Document) => {\r\n    const result: any = {};\r\n\r\n    for (const [key, field] of Object.entries(fields)) {\r\n        if (doc[key] !== undefined) {\r\n            result[key] = field;\r\n        }\r\n\r\n        return result;\r\n    }\r\n};\r\n\r\nconst GuideFields: FieldDefs = {\r\n    title: {\r\n        type: 'string',\r\n        required: true,\r\n    },\r\n    description: {\r\n        type: 'string',\r\n    },\r\n    props: {\r\n        type: 'list',\r\n        required: true,\r\n        of: {\r\n            type: 'string',\r\n        },\r\n    },\r\n    import: {\r\n        type: 'string',\r\n        required: true,\r\n    },\r\n    docs: {\r\n        type: 'string',\r\n        required: true,\r\n    },\r\n    source: {\r\n        type: 'string',\r\n        required: true,\r\n    },\r\n    package: {\r\n        type: 'string',\r\n        required: true,\r\n    },\r\n    installation: {\r\n        type: 'string',\r\n    },\r\n    pageTitle: {\r\n        type: 'string',\r\n    },\r\n    license: {\r\n        type: 'string',\r\n    },\r\n    styles: {\r\n        type: 'list',\r\n        of: {\r\n            type: 'string',\r\n        },\r\n    },\r\n    group: {\r\n        type: 'string',\r\n    },\r\n    order: {\r\n        type: 'number',\r\n        required: true,\r\n    },\r\n    slug: {\r\n        type: 'string',\r\n        required: true,\r\n    },\r\n    category: {\r\n        type: 'string',\r\n        required: true,\r\n    },\r\n    release: {\r\n        type: 'string',\r\n    },\r\n    date: {\r\n        type: 'string',\r\n    },\r\n    search: {\r\n        type: 'string',\r\n    },\r\n    error: {\r\n        type: 'string',\r\n    },\r\n    componentPrefix: {\r\n        type: 'string',\r\n    },\r\n    hideToc: {\r\n        type: 'boolean',\r\n    },\r\n    polymorphic: {\r\n        type: 'boolean',\r\n    },\r\n    hidden: {\r\n        type: 'boolean',\r\n    },\r\n};\r\n\r\nexport const Guide = defineDocumentType(() => ({\r\n    name: 'Guide',\r\n    contentType: 'mdx',\r\n    filePathPattern: '**/*.mdx',\r\n    fields: GuideFields,\r\n    computedFields: {\r\n        ...computedFields,\r\n        frontMatter: {\r\n            type: 'json',\r\n            resolve: (doc) => ({\r\n                ...computeFrontmatter(GuideFields, doc),\r\n                headings: getTableOfContents(doc.body.raw),\r\n            }),\r\n        },\r\n    },\r\n}));\r\n\r\nexport default makeSource({\r\n    contentDirPath: 'docs',\r\n    documentTypes: [Guide],\r\n    mdx: {\r\n        rehypePlugins: [rehypeSlug],\r\n    },\r\n});\r\n", "import { slug } from 'github-slugger';\r\n\r\nexport interface Heading {\r\n    value: string;\r\n    id?: string;\r\n    level: string;\r\n    depth: number;\r\n}\r\n\r\nexport function getTableOfContents(mdxContent: string) {\r\n    const regexp = new RegExp(/^(### |## )(.*)\\n/, 'gm');\r\n    const headings = [...mdxContent.matchAll(regexp)];\r\n    let tableOfContents: Heading[] = [];\r\n\r\n\r\n    if (headings.length) {\r\n        tableOfContents = headings.map((heading) => {\r\n            const headingText = heading[2].trim();\r\n            const headingType = heading[1].trim() === '##' ? 'h2' : 'h3';\r\n            const headingLink = slug(headingText, false);\r\n\r\n            return {\r\n                value: headingText,\r\n                id: headingLink,\r\n                level: headingType,\r\n                depth: parseInt(headingType.replace('h', ''), 10),\r\n            };\r\n        });\r\n    }\r\n\r\n    return tableOfContents;\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
